/* Grids + Sass generated by Gridset: http://gridsetapp.com */

/* Note ---------------------------------------------------------

   * The Gridset Sass output is divided into two types: functions and mixins. 
   
   * Prefix = the grid prefix you defined in your set.
   
   * Containers are optional. Use these when a span is nested within another span. So an element spanning columns 2-3 inside an element spanning 1-5 would be: gs-span(x, 2, 3, (1, 5))
   
   * When passing arguments, use false for null arguments, so a span with no end would be: gs-span(x, 2), but a span with no end and a container would be: gs-span(x, 2, false, (1, 5))
   
   * Use IE flags ($ie) when building styles for Internet Explorer 8 and below. You can use either 'ie' or 'true'. A span in IE would be: gs-span(x, 2, 3, false, ie) or gs-span(x, 2, 3, false, true)
   
   * You will need to write your own media queries for different screen sizes. You can generate these based on your grid widths by using the gs-media function. This will only work in Sass versions 3.2 and up. Here is an example:
   
     @include gs-media(x) {
   	
   	  -- CSS goes here --
   	
     }
     
   -------------------------------------------------------------- */

/* Functions ----------------------------------------------------

   Functions will return an exact measurement (float) for specific properties.
   
   gs-grid(prefix) = Returns a list of all column widths for a grid.
   
   gs-gutter(prefix) = Returns the exact gutter of a grid as a numeric value.
   
   gs-width(prefix, start, end, (container start, container end)) = Returns the exact width measurement of the span of columns as a numeric value.
   
   gs-marginleft(prefix, start, (container start, container end)) = Returns the exact left offset of a span as a numeric value.

   -------------------------------------------------------------- */

@function gs-grid($prefix){

  @if $prefix == m	{ @return (48.5,48.5); }
  @if $prefix == t	{ @return (22.75,22.75,22.75,22.75); }
  @if $prefix == my	{ @return (9.875,9.875,9.875,9.875,9.875,9.875,9.875,9.875); }

}

@function gs-gutter($prefix){

  @if $prefix == m	{ @return 3; }
  @if $prefix == t	{ @return 3; }
  @if $prefix == my	{ @return 3; }

}

@function gs-width($grid, $start, $end: false, $container: false){

  $cols:	gs-grid($grid);
  $gutter:	gs-gutter($grid);
  $measure:	0;
  $gutters:	0;
  $i:		$start;

  @if $end != false {

    @if ($end - $start) > 0 { $gutters: ($gutter * ($end - $start)); }

    @while $i <= $end {

      $measure: $measure + nth($cols,$i);
      $i: $i + 1;

    }

  }
  @else {

    $measure: nth($cols,$start);

  }

  @return gs-adjust($grid, $measure + $gutters, $container);

}

@function gs-marginleft($grid, $spanstart, $container: false){

  @if ($container == false and $spanstart > 1) or ($container != false and $spanstart > nth($container,1)) {

    $start:	1;
    $end:	$spanstart - 1;
    
    @if $container != false { $start: nth($container,1); }
    @if $end == $start { $end: false; }
    
    $margin:	gs-width($grid, $start, $end);
    $gutter:	gs-gutter($grid);

    @return gs-adjust($grid, $margin + $gutter, $container);

  }
  @else {

    @return 0;

  }

}

@function gs-adjust($grid, $measure, $container: false){
	
  $containerend: false;
  @if length($container) == 2 { $containerend: nth($container,2); }
	
  @if $container != false {

    $adjusted: $measure / gs-width($grid, nth($container,1), $containerend);
    @return $adjusted * 100;

  }
  @else {

    @return $measure;

  }

}

/* Mixins  ------------------------------------------------------

   The Gridset mixins include every property you need to position or add padding to an element, using the functions to calculate these properties.
   
   gs-span(prefix, start, end, (container start, container end), IE flag) = All of the properties you need to place your element on grid. Enter "all" for 100% width items. An IE flag of 'ie' or 'true' (without the quotes) will return special styles for Internet Explorer 8 and below.
   
   gs-pad(prefix, padding type, (container start, container end)) = All of the properties you need to add the different types of padding to an element. Explanation of padding types here: https://gridsetapp.com/documentation/classes/
   
   gs-float(prefix, direction, (container start, container end)) = All of the properties you need to float an element in one direction and give it the proper amount of margin in the opposite direction. Direction = left or right.
   
   gs-media(prefix) = This will generate the appropriate media query for a particular grid. (Sass versions 3.2+ only)
   
   -------------------------------------------------------------- */

@mixin gs-media($prefix){

  @if $prefix == t	{ @media only screen and (min-width: 580px) { @content; } }
  @if $prefix == my	{ @media only screen and (min-width: 900px) { @content; } }

}

@mixin gs-span($grid, $start, $end: false, $container: false, $ie: false){
	
  @if $start == all {
	
    clear: both;
    display: block;
    float: left;
    margin-left: 0;
    width: 100%;
		
  }
  @else {
  
  	$marginright: -100%;
  	@if ($ie == ie) or ($ie == true) { $marginright: -99.9%; }
	
    display: block;
    float: left;
    margin-left: #{gs-marginleft($grid, $start, $container) + '%'};  
    margin-right: $marginright;
    width: #{gs-width($grid, $start, $end, $container) + '%'};
	  
  }

}

@mixin gs-pad($grid, $type: pad, $container: false){

  $pad: 0;

  @if $type == pad or $type == padin {

    $pad: (gs-gutter($grid) / 2);

  }
  @else if $type == padfull or $type == padinfull {

    $pad: gs-gutter($grid);

  }

  @if $container != false { $pad: gs-adjust($grid, $pad, $container); }

  @if $type == pad or $type == padfull {

    left: #{'-' + $pad + '%'};
    position: relative;

  }
  @else if $type == padin or $type == padinfull {

    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;

  }

  padding-left: #{$pad + '%'};
  padding-right: #{$pad + '%'};

}

@mixin gs-float($grid, $direction, $container: false){
	
  $margin: gs-gutter($grid);
  @if $container != false { $margin: gs-adjust($grid, $margin, $container); }
	
	clear: none;
  float: $direction;
  
  @if $direction == left {
  
  	margin-left: 0;
  	margin-right: #{$margin + '%'};
  	
  }
  @else if $direction == right {
  
  	margin-right: 0;
  	margin-left: #{$margin + '%'};
  	
  }
  
}